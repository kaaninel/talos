// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: storage/storage.proto

package storage

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	common "github.com/siderolabs/talos/pkg/machinery/api/common"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Disk_DiskType int32

const (
	Disk_UNKNOWN Disk_DiskType = 0
	Disk_SSD     Disk_DiskType = 1
	Disk_HDD     Disk_DiskType = 2
	Disk_NVME    Disk_DiskType = 3
	Disk_SD      Disk_DiskType = 4
	Disk_CD      Disk_DiskType = 5
)

// Enum value maps for Disk_DiskType.
var (
	Disk_DiskType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SSD",
		2: "HDD",
		3: "NVME",
		4: "SD",
		5: "CD",
	}
	Disk_DiskType_value = map[string]int32{
		"UNKNOWN": 0,
		"SSD":     1,
		"HDD":     2,
		"NVME":    3,
		"SD":      4,
		"CD":      5,
	}
)

func (x Disk_DiskType) Enum() *Disk_DiskType {
	p := new(Disk_DiskType)
	*p = x
	return p
}

func (x Disk_DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Disk_DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_storage_proto_enumTypes[0].Descriptor()
}

func (Disk_DiskType) Type() protoreflect.EnumType {
	return &file_storage_storage_proto_enumTypes[0]
}

func (x Disk_DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Disk_DiskType.Descriptor instead.
func (Disk_DiskType) EnumDescriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{0, 0}
}

type BlockDeviceWipeDescriptor_Method int32

const (
	// Fast wipe - wipe only filesystem signatures.
	BlockDeviceWipeDescriptor_FAST BlockDeviceWipeDescriptor_Method = 0
	// Zeroes wipe - wipe by overwriting with zeroes (might be slow depending on the disk size and available hardware features).
	BlockDeviceWipeDescriptor_ZEROES BlockDeviceWipeDescriptor_Method = 1
)

// Enum value maps for BlockDeviceWipeDescriptor_Method.
var (
	BlockDeviceWipeDescriptor_Method_name = map[int32]string{
		0: "FAST",
		1: "ZEROES",
	}
	BlockDeviceWipeDescriptor_Method_value = map[string]int32{
		"FAST":   0,
		"ZEROES": 1,
	}
)

func (x BlockDeviceWipeDescriptor_Method) Enum() *BlockDeviceWipeDescriptor_Method {
	p := new(BlockDeviceWipeDescriptor_Method)
	*p = x
	return p
}

func (x BlockDeviceWipeDescriptor_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockDeviceWipeDescriptor_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_storage_proto_enumTypes[1].Descriptor()
}

func (BlockDeviceWipeDescriptor_Method) Type() protoreflect.EnumType {
	return &file_storage_storage_proto_enumTypes[1]
}

func (x BlockDeviceWipeDescriptor_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockDeviceWipeDescriptor_Method.Descriptor instead.
func (BlockDeviceWipeDescriptor_Method) EnumDescriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{4, 0}
}

// Disk represents a disk.
type Disk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Size indicates the disk size in bytes.
	Size uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Model idicates the disk model.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// DeviceName indicates the disk name (e.g. `sda`).
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Name as in `/sys/block/<dev>/device/name`.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Serial as in `/sys/block/<dev>/device/serial`.
	Serial string `protobuf:"bytes,5,opt,name=serial,proto3" json:"serial,omitempty"`
	// Modalias as in `/sys/block/<dev>/device/modalias`.
	Modalias string `protobuf:"bytes,6,opt,name=modalias,proto3" json:"modalias,omitempty"`
	// Uuid as in `/sys/block/<dev>/device/uuid`.
	Uuid string `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Wwid as in `/sys/block/<dev>/device/wwid`.
	Wwid string `protobuf:"bytes,8,opt,name=wwid,proto3" json:"wwid,omitempty"`
	// Type is a type of the disk: nvme, ssd, hdd, sd card.
	Type Disk_DiskType `protobuf:"varint,9,opt,name=type,proto3,enum=storage.Disk_DiskType" json:"type,omitempty"`
	// BusPath is the bus path of the disk.
	BusPath string `protobuf:"bytes,10,opt,name=bus_path,json=busPath,proto3" json:"bus_path,omitempty"`
	// SystemDisk indicates that the disk is used as Talos system disk.
	SystemDisk bool `protobuf:"varint,11,opt,name=system_disk,json=systemDisk,proto3" json:"system_disk,omitempty"`
	// Subsystem is the symlink path in the `/sys/block/<dev>/subsystem`.
	Subsystem string `protobuf:"bytes,12,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	// Readonly specifies if the disk is read only.
	Readonly      bool `protobuf:"varint,13,opt,name=readonly,proto3" json:"readonly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disk) Reset() {
	*x = Disk{}
	mi := &file_storage_storage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_storage_storage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{0}
}

func (x *Disk) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Disk) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Disk) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *Disk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Disk) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *Disk) GetModalias() string {
	if x != nil {
		return x.Modalias
	}
	return ""
}

func (x *Disk) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Disk) GetWwid() string {
	if x != nil {
		return x.Wwid
	}
	return ""
}

func (x *Disk) GetType() Disk_DiskType {
	if x != nil {
		return x.Type
	}
	return Disk_UNKNOWN
}

func (x *Disk) GetBusPath() string {
	if x != nil {
		return x.BusPath
	}
	return ""
}

func (x *Disk) GetSystemDisk() bool {
	if x != nil {
		return x.SystemDisk
	}
	return false
}

func (x *Disk) GetSubsystem() string {
	if x != nil {
		return x.Subsystem
	}
	return ""
}

func (x *Disk) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

// DisksResponse represents the response of the `Disks` RPC.
type Disks struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *common.Metadata       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Disks         []*Disk                `protobuf:"bytes,2,rep,name=disks,proto3" json:"disks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disks) Reset() {
	*x = Disks{}
	mi := &file_storage_storage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disks) ProtoMessage() {}

func (x *Disks) ProtoReflect() protoreflect.Message {
	mi := &file_storage_storage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disks.ProtoReflect.Descriptor instead.
func (*Disks) Descriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{1}
}

func (x *Disks) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Disks) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

type DisksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*Disks               `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisksResponse) Reset() {
	*x = DisksResponse{}
	mi := &file_storage_storage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisksResponse) ProtoMessage() {}

func (x *DisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_storage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisksResponse.ProtoReflect.Descriptor instead.
func (*DisksResponse) Descriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{2}
}

func (x *DisksResponse) GetMessages() []*Disks {
	if x != nil {
		return x.Messages
	}
	return nil
}

type BlockDeviceWipeRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Devices       []*BlockDeviceWipeDescriptor `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockDeviceWipeRequest) Reset() {
	*x = BlockDeviceWipeRequest{}
	mi := &file_storage_storage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockDeviceWipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDeviceWipeRequest) ProtoMessage() {}

func (x *BlockDeviceWipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_storage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDeviceWipeRequest.ProtoReflect.Descriptor instead.
func (*BlockDeviceWipeRequest) Descriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{3}
}

func (x *BlockDeviceWipeRequest) GetDevices() []*BlockDeviceWipeDescriptor {
	if x != nil {
		return x.Devices
	}
	return nil
}

// BlockDeviceWipeDescriptor represents a single block device to be wiped.
//
// The device can be either a full disk (e.g. vda) or a partition (vda5).
// The device should not be used in any of active volumes.
// The device should not be used as a secondary (e.g. part of LVM).
type BlockDeviceWipeDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Device name to wipe (e.g. sda or sda5).
	//
	// The name should be submitted without `/dev/` prefix.
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Wipe method to use.
	Method BlockDeviceWipeDescriptor_Method `protobuf:"varint,2,opt,name=method,proto3,enum=storage.BlockDeviceWipeDescriptor_Method" json:"method,omitempty"`
	// Skip the volume in use check.
	SkipVolumeCheck bool `protobuf:"varint,3,opt,name=skip_volume_check,json=skipVolumeCheck,proto3" json:"skip_volume_check,omitempty"`
	// Skip the secondary disk check (e.g. underlying disk for RAID or LVM).
	SkipSecondaryCheck bool `protobuf:"varint,5,opt,name=skip_secondary_check,json=skipSecondaryCheck,proto3" json:"skip_secondary_check,omitempty"`
	// Drop the partition (only applies if the device is a partition).
	DropPartition bool `protobuf:"varint,4,opt,name=drop_partition,json=dropPartition,proto3" json:"drop_partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockDeviceWipeDescriptor) Reset() {
	*x = BlockDeviceWipeDescriptor{}
	mi := &file_storage_storage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockDeviceWipeDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDeviceWipeDescriptor) ProtoMessage() {}

func (x *BlockDeviceWipeDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_storage_storage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDeviceWipeDescriptor.ProtoReflect.Descriptor instead.
func (*BlockDeviceWipeDescriptor) Descriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{4}
}

func (x *BlockDeviceWipeDescriptor) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *BlockDeviceWipeDescriptor) GetMethod() BlockDeviceWipeDescriptor_Method {
	if x != nil {
		return x.Method
	}
	return BlockDeviceWipeDescriptor_FAST
}

func (x *BlockDeviceWipeDescriptor) GetSkipVolumeCheck() bool {
	if x != nil {
		return x.SkipVolumeCheck
	}
	return false
}

func (x *BlockDeviceWipeDescriptor) GetSkipSecondaryCheck() bool {
	if x != nil {
		return x.SkipSecondaryCheck
	}
	return false
}

func (x *BlockDeviceWipeDescriptor) GetDropPartition() bool {
	if x != nil {
		return x.DropPartition
	}
	return false
}

type BlockDeviceWipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*BlockDeviceWipe     `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockDeviceWipeResponse) Reset() {
	*x = BlockDeviceWipeResponse{}
	mi := &file_storage_storage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockDeviceWipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDeviceWipeResponse) ProtoMessage() {}

func (x *BlockDeviceWipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_storage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDeviceWipeResponse.ProtoReflect.Descriptor instead.
func (*BlockDeviceWipeResponse) Descriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{5}
}

func (x *BlockDeviceWipeResponse) GetMessages() []*BlockDeviceWipe {
	if x != nil {
		return x.Messages
	}
	return nil
}

type BlockDeviceWipe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *common.Metadata       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockDeviceWipe) Reset() {
	*x = BlockDeviceWipe{}
	mi := &file_storage_storage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockDeviceWipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDeviceWipe) ProtoMessage() {}

func (x *BlockDeviceWipe) ProtoReflect() protoreflect.Message {
	mi := &file_storage_storage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDeviceWipe.ProtoReflect.Descriptor instead.
func (*BlockDeviceWipe) Descriptor() ([]byte, []int) {
	return file_storage_storage_proto_rawDescGZIP(), []int{6}
}

func (x *BlockDeviceWipe) GetMetadata() *common.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_storage_storage_proto protoreflect.FileDescriptor

const file_storage_storage_proto_rawDesc = "" +
	"\n" +
	"\x15storage/storage.proto\x12\astorage\x1a\x13common/common.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xa8\x03\n" +
	"\x04Disk\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x04R\x04size\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\x12\x1f\n" +
	"\vdevice_name\x18\x03 \x01(\tR\n" +
	"deviceName\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x16\n" +
	"\x06serial\x18\x05 \x01(\tR\x06serial\x12\x1a\n" +
	"\bmodalias\x18\x06 \x01(\tR\bmodalias\x12\x12\n" +
	"\x04uuid\x18\a \x01(\tR\x04uuid\x12\x12\n" +
	"\x04wwid\x18\b \x01(\tR\x04wwid\x12*\n" +
	"\x04type\x18\t \x01(\x0e2\x16.storage.Disk.DiskTypeR\x04type\x12\x19\n" +
	"\bbus_path\x18\n" +
	" \x01(\tR\abusPath\x12\x1f\n" +
	"\vsystem_disk\x18\v \x01(\bR\n" +
	"systemDisk\x12\x1c\n" +
	"\tsubsystem\x18\f \x01(\tR\tsubsystem\x12\x1a\n" +
	"\breadonly\x18\r \x01(\bR\breadonly\"C\n" +
	"\bDiskType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\a\n" +
	"\x03SSD\x10\x01\x12\a\n" +
	"\x03HDD\x10\x02\x12\b\n" +
	"\x04NVME\x10\x03\x12\x06\n" +
	"\x02SD\x10\x04\x12\x06\n" +
	"\x02CD\x10\x05\"Z\n" +
	"\x05Disks\x12,\n" +
	"\bmetadata\x18\x01 \x01(\v2\x10.common.MetadataR\bmetadata\x12#\n" +
	"\x05disks\x18\x02 \x03(\v2\r.storage.DiskR\x05disks\";\n" +
	"\rDisksResponse\x12*\n" +
	"\bmessages\x18\x01 \x03(\v2\x0e.storage.DisksR\bmessages\"V\n" +
	"\x16BlockDeviceWipeRequest\x12<\n" +
	"\adevices\x18\x01 \x03(\v2\".storage.BlockDeviceWipeDescriptorR\adevices\"\x9b\x02\n" +
	"\x19BlockDeviceWipeDescriptor\x12\x16\n" +
	"\x06device\x18\x01 \x01(\tR\x06device\x12A\n" +
	"\x06method\x18\x02 \x01(\x0e2).storage.BlockDeviceWipeDescriptor.MethodR\x06method\x12*\n" +
	"\x11skip_volume_check\x18\x03 \x01(\bR\x0fskipVolumeCheck\x120\n" +
	"\x14skip_secondary_check\x18\x05 \x01(\bR\x12skipSecondaryCheck\x12%\n" +
	"\x0edrop_partition\x18\x04 \x01(\bR\rdropPartition\"\x1e\n" +
	"\x06Method\x12\b\n" +
	"\x04FAST\x10\x00\x12\n" +
	"\n" +
	"\x06ZEROES\x10\x01\"O\n" +
	"\x17BlockDeviceWipeResponse\x124\n" +
	"\bmessages\x18\x01 \x03(\v2\x18.storage.BlockDeviceWipeR\bmessages\"?\n" +
	"\x0fBlockDeviceWipe\x12,\n" +
	"\bmetadata\x18\x01 \x01(\v2\x10.common.MetadataR\bmetadata2\x9f\x01\n" +
	"\x0eStorageService\x127\n" +
	"\x05Disks\x12\x16.google.protobuf.Empty\x1a\x16.storage.DisksResponse\x12T\n" +
	"\x0fBlockDeviceWipe\x12\x1f.storage.BlockDeviceWipeRequest\x1a .storage.BlockDeviceWipeResponseBN\n" +
	"\x15dev.talos.api.storageZ5github.com/siderolabs/talos/pkg/machinery/api/storageb\x06proto3"

var (
	file_storage_storage_proto_rawDescOnce sync.Once
	file_storage_storage_proto_rawDescData []byte
)

func file_storage_storage_proto_rawDescGZIP() []byte {
	file_storage_storage_proto_rawDescOnce.Do(func() {
		file_storage_storage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_storage_storage_proto_rawDesc), len(file_storage_storage_proto_rawDesc)))
	})
	return file_storage_storage_proto_rawDescData
}

var file_storage_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_storage_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_storage_storage_proto_goTypes = []any{
	(Disk_DiskType)(0),                    // 0: storage.Disk.DiskType
	(BlockDeviceWipeDescriptor_Method)(0), // 1: storage.BlockDeviceWipeDescriptor.Method
	(*Disk)(nil),                          // 2: storage.Disk
	(*Disks)(nil),                         // 3: storage.Disks
	(*DisksResponse)(nil),                 // 4: storage.DisksResponse
	(*BlockDeviceWipeRequest)(nil),        // 5: storage.BlockDeviceWipeRequest
	(*BlockDeviceWipeDescriptor)(nil),     // 6: storage.BlockDeviceWipeDescriptor
	(*BlockDeviceWipeResponse)(nil),       // 7: storage.BlockDeviceWipeResponse
	(*BlockDeviceWipe)(nil),               // 8: storage.BlockDeviceWipe
	(*common.Metadata)(nil),               // 9: common.Metadata
	(*emptypb.Empty)(nil),                 // 10: google.protobuf.Empty
}
var file_storage_storage_proto_depIdxs = []int32{
	0,  // 0: storage.Disk.type:type_name -> storage.Disk.DiskType
	9,  // 1: storage.Disks.metadata:type_name -> common.Metadata
	2,  // 2: storage.Disks.disks:type_name -> storage.Disk
	3,  // 3: storage.DisksResponse.messages:type_name -> storage.Disks
	6,  // 4: storage.BlockDeviceWipeRequest.devices:type_name -> storage.BlockDeviceWipeDescriptor
	1,  // 5: storage.BlockDeviceWipeDescriptor.method:type_name -> storage.BlockDeviceWipeDescriptor.Method
	8,  // 6: storage.BlockDeviceWipeResponse.messages:type_name -> storage.BlockDeviceWipe
	9,  // 7: storage.BlockDeviceWipe.metadata:type_name -> common.Metadata
	10, // 8: storage.StorageService.Disks:input_type -> google.protobuf.Empty
	5,  // 9: storage.StorageService.BlockDeviceWipe:input_type -> storage.BlockDeviceWipeRequest
	4,  // 10: storage.StorageService.Disks:output_type -> storage.DisksResponse
	7,  // 11: storage.StorageService.BlockDeviceWipe:output_type -> storage.BlockDeviceWipeResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_storage_storage_proto_init() }
func file_storage_storage_proto_init() {
	if File_storage_storage_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storage_storage_proto_rawDesc), len(file_storage_storage_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storage_storage_proto_goTypes,
		DependencyIndexes: file_storage_storage_proto_depIdxs,
		EnumInfos:         file_storage_storage_proto_enumTypes,
		MessageInfos:      file_storage_storage_proto_msgTypes,
	}.Build()
	File_storage_storage_proto = out.File
	file_storage_storage_proto_goTypes = nil
	file_storage_storage_proto_depIdxs = nil
}
